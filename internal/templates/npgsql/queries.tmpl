{{define "asyncHeader"}}
        {{- $query := . }}

{{end}}

{{define "syncHeader" }}
        {{- $query := . }}

{{end}}

{{define "queriesFile" }}// Code generated by sqlc. DO NOT EDIT.
// versions:
//     sqlc {{ .SqlcVersion }}
//     sqlc-gen-cs {{ .CsGenVersion }}
using Npgsql;

namespace {{ .Namespace }};

public static class {{classname .QueryFileName }} {
    {{- range .CodeQueries}}
    {{- $query := .}}
    {{- if $.OutputQuery .SourceName }}
    const string {{ .ConstantName }} = @"-- name: {{.MethodName}} {{.Cmd}}
    {{.SQL}}
    ";

    {{ if .Arg.EmitClass -}}
    public class {{.Arg.Type}} { {{- range .Arg.UniqueMembers}}
        public {{.Type}} {{.Name}} {{if .NotNull -}} = default! {{- end}};
        {{- end}}
    }

    {{end -}}

    {{- if .Ret.EmitClass}}

    public class {{.Ret.Type}} { {{- range .Ret.Class.Members}}
        public {{.Type}} {{.Name}} {{if .NotNull -}} = default! {{- end}};
        {{- end}}
    }

    {{end -}}

    {{- if eq .Cmd ":one"}}
    {{- range .Comments}}// {{.}}
    {{- end}}
    {{- if $.EmitAsync -}}
    public static async Task<{{.Ret.EmitReturnType $.EmitNulls}}> {{.MethodName}}(this NpgsqlDataSource dbSource, {{.Arg.Pair}}, NpgsqlConnection? conn = null, NpgsqlTransaction? tx = null) {
        await using var connection = conn ?? await dbSource.OpenConnectionAsync();
        await using var command = new NpgsqlCommand({{.ConstantName}}, connection, tx) {{- if .HasArgs }} {
            Parameters = {
                {{- if .Arg.IsClass }}
                {{- range .Arg.UniqueMembers }}
                {{- if $query.Arg.EmitClass }}
                new NpgsqlParameter<{{.Type}}>() { TypedValue = {{$query.Arg.Name}}.{{.Name}} },
                {{- else}}
                new NpgsqlParameter<{{.Type}}>() { TypedValue = {{.Name}} },
                {{- end}}
                {{- end}}
                {{- else}}
                new NpgsqlParameter<{{.Arg.Typ}}>() { TypedValue = {{.Arg.Name}} },
                {{- end}}
            }
        }{{- end}};
        await using var reader = await command.ExecuteReaderAsync(); 
        if(await reader.ReadAsync()) {
            {{- if .Ret.IsClass}}
            return new {{.Ret.Type}} {
                {{- range $index, $element := .Ret.Class.Members }}
                {{$element.Name}} = reader.GetFieldValue<{{$element.Type}}>({{$index}}),
                {{- end}}
            };
            {{- else}}
            return reader.GetFieldValue<{{.Ret.Type}}>(0);
            {{- end}}
        } else {
            return null;
        } 
    }
    {{- else}}
    public static {{.Ret.EmitReturnType $.EmitNulls}} {{.MethodName}} (this NpgsqlDataSource dbSource, {{.Arg.Pair}}, NpgsqlConnection? conn = null, NpgsqlTransaction? tx = null) {
        using var connection = conn ?? dbSource.OpenConnection();
        using var command = new NpgsqlCommand({{.ConstantName}}, connection, tx) {{- if .HasArgs }} {
            Parameters = {
                {{- if .Arg.IsClass }}
                {{- range .Arg.UniqueMembers }}
                {{- if $query.Arg.EmitClass }}
                new NpgsqlParameter<{{.Type}}>() { TypedValue = {{$query.Arg.Name}}.{{.Name}} },
                {{- else}}
                new NpgsqlParameter<{{.Type}}>() { TypedValue = {{.Name}} },
                {{- end}}
                {{- end}}
                {{- else}}
                new NpgsqlParameter<{{.Arg.Typ}}>() { TypedValue = {{.Arg.Name}} },
                {{- end}}
            }
        } {{- end}};
        using var reader = command.ExecuteReader();
        if(reader.Read()) {
            {{- if .Ret.IsClass}}
            return new {{.Ret.Type}} {
                {{- range $index, $element := .Ret.Class.Members }}
                {{$element.Name}} = reader.GetFieldValue<{{$element.Type}}>({{$index}}),
                {{- end}}
            };
            {{- else}}
            return reader.GetFieldValue<{{.Ret.Type}}>(0);
            {{- end}}
        } else {
            return null;
        } 
    }
    {{end -}}
    {{end -}}

    {{- if eq .Cmd ":many"}}
    {{- range .Comments}}// {{.}}
    {{- end}}
    {{- if $.EmitAsync}}
    public static async Task<List<{{.Ret.EmitReturnType $.EmitNulls}}>> {{.MethodName}}(this NpgsqlDataSource dbSource, {{.Arg.Pair}}, NpgsqlConnection? conn = null, NpgsqlTransaction? tx = null) {
        await using var connection = conn ?? await dbSource.OpenConnectionAsync();
        await using var command = new NpgsqlCommand({{.ConstantName}}, connection, tx) {{- if .HasArgs }} {
            Parameters = {
                {{- if .Arg.IsClass }}
                {{- range .Arg.UniqueMembers }}
                {{- if $query.Arg.EmitClass }}
                new NpgsqlParameter<{{.Type}}>() { TypedValue = {{$query.Arg.Name}}.{{.Name}} },
                {{- else}}
                new NpgsqlParameter<{{.Type}}>() { TypedValue = {{.Name}} },
                {{- end}}
                {{- end}}
                {{- else}}
                new NpgsqlParameter<{{.Arg.Typ}}>() { TypedValue = {{.Arg.Name}} },
                {{- end}}
            }
        }{{- end}};
        await using var reader = await command.ExecuteReaderAsync();
        if(!reader.HasRows()) {
            return null;
        }
        var results = new List<{{.Ret.EmitReturnType $.EmitNulls}}>();
        while(await reader.ReadAsync()) {
            {{- if .Ret.IsClass}}
            results.Add(new {{.Ret.Type}} {
                {{- range $index, $element := .Ret.Class.Members }}
                {{$element.Name}} = reader.GetFieldValue<{{$element.Type}}>({{$index}}),
                {{- end}}
            });
            {{- else}}
            results.Add(reader.GetFieldValue<{{.Ret.Type}}>(0));
            {{- end}}
        }

        return results;
    }
    {{else}}
    public static List<{{.Ret.EmitReturnType $.EmitNulls}}> {{.MethodName}} (this NpgsqlDataSource dbSource, {{.Arg.Pair}}, NpgsqlConnection? conn = null, NpgsqlTransaction? tx = null) {
        using var connection = conn ?? dbSource.OpenConnection();
        using var command = new NpgsqlCommand({{.ConstantName}}, connection, tx) {{- if .HasArgs }} {
            Parameters = {
                {{- if .Arg.IsClass }}
                {{- range .Arg.UniqueMembers }}
                {{- if $query.Arg.EmitClass }}
                new NpgsqlParameter<{{.Type}}>() { TypedValue = {{$query.Arg.Name}}.{{.Name}} },
                {{- else}}
                new NpgsqlParameter<{{.Type}}>() { TypedValue = {{.Name}} },
                {{- end}}
                {{- end}}
                {{- else}}
                new NpgsqlParameter<{{.Arg.Typ}}>() { TypedValue = {{.Arg.Name}} },
                {{- end}}
            }
        } {{- end}};
        using var reader = command.ExecuteReader();
        if(!reader.HasRows()) {
            return null;
        }
        var results = new List<{{.Ret.EmitReturnType $.EmitNulls}}>();
        while(reader.ReadAsync()) {
            {{- if .Ret.IsClass}}
            results.Add(new {{.Ret.Type}} {
                {{- range $index, $element := .Ret.Class.Members }}
                {{$element.Name}} = reader.GetFieldValue<{{$element.Type}}>({{$index}}),
                {{- end}}
            });
            {{- else}}
            results.Add(reader.GetFieldValue<{{.Ret.Type}}>(0));
            {{- end}}
        }

        return results;
    }
    {{ end -}}
    {{ end -}}

    {{- if eq .Cmd ":exec" ":execresult" ":execrows" }}
    {{- range .Comments}}//{{.}}
    {{- end}}
    {{- if $.EmitAsync}}
    public static async Task<int> {{.MethodName}}(this NpgsqlDataSource dbSource, {{.Arg.Pair}}, NpgsqlConnection? conn = null, NpgsqlTransaction? tx = null) {
        await using var connection = conn ?? await dbSource.OpenConnectionAsync();
        await using var command = new NpgsqlCommand({{.ConstantName}}, connection, tx) {{- if .HasArgs }} {
            Parameters = {
                {{- if .Arg.IsClass }}
                {{- range .Arg.UniqueMembers }}
                {{- if $query.Arg.EmitClass }}
                new NpgsqlParameter<{{.Type}}>() { TypedValue = {{$query.Arg.Name}}.{{.Name}} },
                {{- else}}
                new NpgsqlParameter<{{.Type}}>() { TypedValue = {{.Name}} },
                {{- end}}
                {{- end}}
                {{- else}}
                new NpgsqlParameter<{{.Arg.Typ}}>() { TypedValue = {{.Arg.Name}} },
                {{- end}}
            }
        }{{- end}};
        return await command.ExecuteNonQueryAsync();
    }
    {{- else}}
    public static int {{.MethodName}} (this NpgsqlDataSource dbSource, {{.Arg.Pair}}, NpgsqlConnection? conn = null, NpgsqlTransaction? tx = null) {
        using var connection = conn ?? dbSource.OpenConnection();
        using var command = new NpgsqlCommand({{.ConstantName}}, connection, tx) {{- if .HasArgs }} {
            Parameters = {
                {{- if .Arg.IsClass }}
                {{- range .Arg.UniqueMembers }}
                {{- if $query.Arg.EmitClass }}
                new NpgsqlParameter<{{.Type}}>() { TypedValue = {{$query.Arg.Name}}.{{.Name}} },
                {{- else}}
                new NpgsqlParameter<{{.Type}}>() { TypedValue = {{.Name}} },
                {{- end}}
                {{- end}}
                {{- else}}
                new NpgsqlParameter<{{.Arg.Typ}}>() { TypedValue = {{.Arg.Name}} },
                {{- end}}
            }
        } {{- end}};
        return command.ExecuteNonQuery();
    }
    {{ end -}}
    {{ end -}}
    {{ end -}}
    {{ end }}
}
{{- end}}